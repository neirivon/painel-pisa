import streamlit as st
st.set_page_config(page_title="Gamifica√ß√£o do Desempenho - PISA", layout="wide")  # ‚úÖ Agora √© o primeiro comando Streamlit

import pandas as pd
from datetime import datetime
from transformers import pipeline
import uuid
import os
import json

# üåê Estilo visual global
from utils.componentes import estilo
estilo()

# üåç Modo de execu√ß√£o
modo = st.secrets["modo"] if "modo" in st.secrets else "local"

# üéØ T√≠tulo e explica√ß√£o
st.markdown("# üèÜ Gamifica√ß√£o do Desempenho")
st.markdown("Responda √†s quest√µes e acompanhe sua **pontua√ß√£o**, **evolu√ß√£o** e **feedback pedag√≥gico** com base em rubricas adaptadas do PISA OCDE.")

# üìö Quest√µes
questoes = {
    "Leitura": "Escreva uma an√°lise cr√≠tica sobre o impacto das redes sociais na forma como os jovens interpretam textos jornal√≠sticos.",
    "Matem√°tica": "Descreva como voc√™ explicaria a import√¢ncia de porcentagem e propor√ß√£o para economizar no dia a dia de uma fam√≠lia.",
    "Ci√™ncias": "Disserte sobre os efeitos do desmatamento na biodiversidade e como pol√≠ticas p√∫blicas podem mitigar esse problema."
}

area = st.selectbox("üìö Escolha a √°rea da quest√£o:", list(questoes.keys()))
st.markdown(f"### üéì Quest√£o de {area}")
st.info(questoes[area])

resposta = st.text_area("‚úçÔ∏è Digite sua resposta aqui:", height=300)

if resposta.strip():
    if st.button("‚úÖ Enviar Resposta e Atualizar Desempenho"):
        with st.spinner("ü§ñ Avaliando com IA pedag√≥gica..."):

            nlp = pipeline("sentiment-analysis")
            resultado = nlp(resposta[:512])[0]
            pontuacao = 3 if resultado["label"] == "POSITIVE" else 1
            cor = "üü¢" if pontuacao >= 3 else "üü†"

            st.success(f"{cor} Pontua√ß√£o atribu√≠da: **{pontuacao}/4**")
            st.markdown("### üí¨ Feedback Inteligente:")
            st.write("‚úîÔ∏è Resposta bem estruturada, com argumentos relevantes.") if pontuacao == 3 else st.write("üîç Resposta precisa de mais desenvolvimento e conex√µes conceituais.")

            resultado_final = {
                "id": str(uuid.uuid4()),
                "data": str(datetime.now()),
                "area": area,
                "resposta": resposta,
                "pontuacao": pontuacao,
                "modelo": "BERT-sentiment",
                "feedback": resultado
            }

            if modo == "local":
                salvar_json = os.path.join("painel_pisa", "dados_cloud", "historico_gamificacao.json")
                if os.path.exists(salvar_json):
                    with open(salvar_json, "r") as f:
                        historico = json.load(f)
                else:
                    historico = []

                historico.append(resultado_final)

                with open(salvar_json, "w") as f:
                    json.dump(historico, f, indent=4)

            else:
                if "historico_gamificacao_cloud" not in st.session_state:
                    st.session_state["historico_gamificacao_cloud"] = []
                st.session_state["historico_gamificacao_cloud"].append(resultado_final)

            st.balloons()

            # üßÆ Exibe hist√≥rico de desempenho
            st.markdown("## üìä Hist√≥rico de Respostas")
            historico_df = pd.DataFrame([resultado_final])
            st.dataframe(historico_df[["data", "area", "pontuacao"]])
else:
    st.warning("‚úçÔ∏è Responda √† quest√£o acima para iniciar sua gamifica√ß√£o pedag√≥gica.")

