import json
from datetime import datetime

# Caminhos dos arquivos
entrada = "/home/neirivon/SINAPSE2.0/PISA/dados_processados/rubricas/rubrica_sinapse_ia_v1_3_completa.json"
saida = "/home/neirivon/SINAPSE2.0/PISA/dados_processados/rubricas/rubrica_sinapse_ia_v1_3_padronizada.json"

# Dicion√°rio com os novos metadados para cada dimens√£o
novos_metadados = {
    "Progress√£o Cognitiva Educacional": {
        "fonte": "Adaptado de Anderson e Krathwohl (2001), com base em Bloom (1956).",
        "nota": "Adapta√ß√£o realizada pelo autor deste trabalho em 2025.",
        "rubrica(s) de origem": "Taxonomia de Bloom"
    },
    "Perfil Socioecon√¥mico e Contextual": {
        "fonte": "Adaptado de BRASIL. INEP. Indicadores contextuais do SAEB (2017).",
        "nota": "Adapta√ß√£o realizada pelo autor deste trabalho em 2025.",
        "rubrica(s) de origem": "ESCS + Rubrica SAEB"
    },
    "Autonomia e Autorregula√ß√£o da Aprendizagem": {
        "fonte": "Adaptado de BRASIL. MEC. BNCC (2017) e SAEB (2017), com apoio em Flavell (1979) sobre metacogni√ß√£o.",
        "nota": "Adapta√ß√£o realizada pelo autor deste trabalho em 2025.",
        "rubrica(s) de origem": "BNCC + SAEB + Neuropsicopedagogia"
    },
    "Capacidade de Comunica√ß√£o e Express√£o": {
        "fonte": "Adaptado de BRASIL. INEP. Resultados SAEB (2017) e OCDE. Relat√≥rio PISA (2022).",
        "nota": "Adapta√ß√£o realizada pelo autor deste trabalho em 2025.",
        "rubrica(s) de origem": "SAEB + PISA + Rubrica de Linguagens"
    },
    "Racioc√≠nio L√≥gico e Solu√ß√£o de Problemas": {
        "fonte": "Adaptado de BRASIL. INEP. SAEB (2017) e OCDE. PISA (2022).",
        "nota": "Adapta√ß√£o realizada pelo autor deste trabalho em 2025.",
        "rubrica(s) de origem": "Rubrica SAEB + Taxonomia SOLO + PISA"
    },
    "Engajamento e Responsabilidade Social": {
        "fonte": "Adaptado de OCDE (2022), BRASIL. INEP (2017), com apoio em autores como Paulo Freire (1996).",
        "nota": "Adapta√ß√£o realizada pelo autor deste trabalho em 2025.",
        "rubrica(s) de origem": "SAEB + PISA + Freire + Justi√ßa Social"
    },
    "Relacionamento com Saberes Cient√≠ficos e Culturais": {
        "fonte": "Adaptado de BRASIL. INEP. Resultados SAEB (2017) e OCDE. Relat√≥rio PISA (2022), com apoio da BNCC (2017).",
        "nota": "Adapta√ß√£o realizada pelo autor deste trabalho em 2025.",
        "rubrica(s) de origem": "BNCC + SAEB + PISA + Rubrica CTC"
    },
    "Pertencimento e Equidade Territorial (CTC + EJI + ESCS)": {
        "fonte": "Adaptado de BRASIL. MEC. Diretrizes para Educa√ß√£o Escolar Quilombola (2012), Educa√ß√£o do Campo (2010), Educa√ß√£o Escolar Ind√≠gena (2012) e BNCC (2017).",
        "nota": "Adapta√ß√£o realizada pelo autor deste trabalho em 2025.",
        "rubrica(s) de origem": "CTC + EJI + ESCS"
    }
}

try:
    with open(entrada, "r", encoding="utf-8") as f:
        rubrica = json.load(f)

    for dim in rubrica["dimensoes"]:
        nome = dim.get("dimensao")
        if nome in novos_metadados:
            # Remover campo 'origem' e atualizar campos conforme novo padr√£o
            dim.pop("origem", None)
            dim["fonte"] = novos_metadados[nome]["fonte"]
            dim["nota"] = novos_metadados[nome]["nota"]
            dim["rubrica(s) de origem"] = novos_metadados[nome]["rubrica(s) de origem"]

    rubrica["timestamp"] = datetime.now().isoformat()

    with open(saida, "w", encoding="utf-8") as f:
        json.dump(rubrica, f, ensure_ascii=False, indent=2)

    print("‚úÖ Rubrica atualizada com metadados padronizados.")
    print(f"üìÅ Arquivo salvo em: {saida}")

except Exception as e:
    print("‚ùå Erro ao aplicar reformula√ß√µes:")
    print(e)

