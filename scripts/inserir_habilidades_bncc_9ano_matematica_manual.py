from painel_pisa.utils.conexao_mongo import conectar_mongo
from painel_pisa.utils.config import CONFIG
import os
import json
import csv
from datetime import datetime
from pymongo import MongoClient

PASTA_SAIDA = "dados_processadoos.path.join(s, "b")ncc"
JSON_SAIDA = os.path.join(PASTA_SAIDA, "habilidades_bncc_9ano_matematica.json")
CSV_SAIDA = os.path.join(PASTA_SAIDA, "habilidades_bncc_9ano_matematica.csv")

habilidades_bncc = [
    ("EF09MA01", "Reconhecer que, uma vez fixada uma unidade de comprimento, existem segmentos de reta cujo comprimento n√£o √© expresso por n√∫mero racional (como as medidas de diagonais de um pol√≠gono e alturas de um tri√¢ngulo, quando se toma a medida de cada lado como unidade)."),
    ("EF09MA02", "Reconhecer um n√∫mero irracional como um n√∫mero real cuja representa√ß√£o decimal √© infinita e n√£o peri√≥dica, e estimar a localiza√ß√£o de alguns deles na reta num√©rica."),
    ("EF09MA03", "Efetuar c√°lculos com n√∫meros reais, inclusive pot√™ncias com expoentes fracion√°rios."),
    ("EF09MA04", "Resolver e elaborar problemas com n√∫meros reais, inclusive em nota√ß√£o cient√≠fica, envolvendo diferentes opera√ß√µes."),
    ("EF09MA05", "Resolver e elaborar problemas que envolvam porcentagens, com a ideia de aplica√ß√£o de percentuais sucessivos e a determina√ß√£o das taxas percentuais, preferencialmente com o uso de tecnologias digitais, no contexto da educa√ß√£o financeira."),
    ("EF09MA06", "Compreender as fun√ß√µes como rela√ß√µes de depend√™ncia un√≠voca entre duas vari√°veis e suas representa√ß√µes num√©rica, alg√©brica e gr√°fica e utilizar esse conceito para analisar situa√ß√µes que envolvam rela√ß√µes funcionais entre duas vari√°veis."),
    ("EF09MA07", "Resolver problemas que envolvam a raz√£o entre duas grandezas de esp√©cies diferentes, como velocidade e densidade demogr√°fica."),
    ("EF09MA08", "Resolver e elaborar problemas que envolvam rela√ß√µes de proporcionalidade direta e inversa entre duas ou mais grandezas, inclusive escalas, divis√£o em partes proporcionais e taxa de varia√ß√£o, em contextos socioculturais, ambientais e de outras √°reas."),
    ("EF09MA09", "Compreender os processos de fatora√ß√£o de express√µes alg√©bricas, com base em suas rela√ß√µes com os produtos not√°veis, para resolver e elaborar problemas que possam ser representados por equa√ß√µes polinomiais do 2¬∫ grau."),
    ("EF09MA10", "Demonstrar rela√ß√µes simples entre os √¢ngulos formados por retas paralelas cortadas por uma transversal."),
    ("EF09MA11", "Resolver problemas por meio do estabelecimento de rela√ß√µes entre arcos, √¢ngulos centrais e √¢ngulos inscritos na circunfer√™ncia, fazendo uso, inclusive, de softwares de geometria din√¢mica."),
    ("EF09MA12", "Reconhecer as condi√ß√µes necess√°rias e suficientes para que dois tri√¢ngulos sejam semelhantes."),
    ("EF09MA13", "Demonstrar rela√ß√µes m√©tricas do tri√¢ngulo ret√¢ngulo, entre elas o teorema de Pit√°goras, utilizando, inclusive, a semelhan√ßa de tri√¢ngulos."),
    ("EF09MA14", "Resolver e elaborar problemas de aplica√ß√£o do teorema de Pit√°goras ou das rela√ß√µes de proporcionalidade envolvendo retas paralelas cortadas por secantes."),
    ("EF09MA15", "Descrever, por escrito e por meio de um fluxograma, um algoritmo para a constru√ß√£o de um pol√≠gono regular cuja medida do lado √© conhecida, utilizando r√©gua e compasso, como tamb√©m softwares."),
    ("EF09MA16", "Determinar o ponto m√©dio de um segmento de reta e a dist√¢ncia entre dois pontos quaisquer, dadas as coordenadas desses pontos no plano cartesiano, sem o uso de f√≥rmulas, e utilizar esse conhecimento para calcular, por exemplo, medidas de per√≠metros e √°reas de figuras planas constru√≠das no plano."),
    ("EF09MA17", "Reconhecer vistas ortogonais de figuras espaciais e aplicar esse conhecimento para desenhar objetos em perspectiva."),
    ("EF09MA18", "Reconhecer e empregar unidades usadas para expressar medidas muito grandes ou muito pequenas, tais como dist√¢ncia entre planetas e sistemas solares, tamanho de v√≠rus ou de c√©lulas, capacidade de armazenamento de computadores, entre outros."),
    ("EF09MA19", "Resolver e elaborar problemas que envolvam medidas de volumes de prismas e de cilindros retos, inclusive com uso de express√µes de c√°lculo, em situa√ß√µes cotidianas."),
    ("EF09MA20", "Reconhecer, em experimentos aleat√≥rios, eventos independentes e dependentes e calcular a probabilidade de sua ocorr√™ncia, nos dois casos."),
    ("EF09MA21", "Analisar e identificar, em gr√°ficos divulgados pela m√≠dia, os elementos que podem induzir, √†s vezes propositadamente, erros de leitura, como escalas inapropriadas, legendas n√£o explicitadas corretamente, omiss√£o de informa√ß√µes importantes (fontes e datas), entre outros."),
    ("EF09MA22", "Escolher e construir o gr√°fico mais adequado (colunas, setores, linhas), com ou sem uso de planilhas eletr√¥nicas, para apresentar um determinado conjunto de dados, destacando aspectos como as medidas de tend√™ncia central."),
    ("EF09MA23", "Planejar e executar pesquisa amostral envolvendo tema da realidade social e comunicar os resultados por meio de relat√≥rio contendo avalia√ß√£o de medidas de tend√™ncia central e da amplitude, tabelas e gr√°ficos adequados, constru√≠dos com o apoio de planilhas eletr√¥nicas."),
]

# Adiciona metadados
habilidades_dicts = [{
    "etapa": "EF - Anos Finais",
    "ano": "9¬∫ ano",
    "area": "Matem√°tica",
    "componente": "Matem√°tica",
    "codigo": codigo,
    "habilidade": habilidade,
    "fonte": "BNCC",
    "timestamp_extracao": datetime.utcnow()
} for codigo, habilidade in habilidades_bncc]

# Salva como JSON
os.makedirs(PASTA_SAIDA, exist_ok=True)
with open(JSON_SAIDA, "w", encoding="utf-8") as jf:
    json.dump(
        [{**h, "timestamp_extracao": h["timestamp_extracao"].isoformat()} for h in habilidades_dicts],
        jf, ensure_ascii=False, indent=2
    )
print(f"üíæ JSON salvo em: {JSON_SAIDA}")

# Salva como CSV
with open(CSV_SAIDA, "w", encoding="utf-8", newline="") as cf:
    writer = csv.DictWriter(cf, fieldnames=["codigo", "habilidade", "etapa", "ano", "area", "componente", "fonte"])
    writer.writeheader()
    for h in habilidades_dicts:
        writer.writerow({k: h[k] for k in writer.fieldnames})
print(f"üíæ CSV salvo em: {CSV_SAIDA}")

# Insere no MongoDB
client = conectar_mongo(nome_banco="saeb")[1]
db = client["rubricas"]
colecao = db["bncc_9ano"]
resultado = colecao.insert_many(habilidades_dicts)
client.close()
print(f"üåê Inseridos {len(resultado.inserted_ids)} documentos no MongoDB.")
print("üèÅ Fim da execu√ß√£o.")

