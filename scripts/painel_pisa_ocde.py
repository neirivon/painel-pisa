from painel_pisa.utils.conexao_mongo import conectar_mongo
from painel_pisa.utils.config import CONFIG
import streamlit as st
import pandas as pd
import plotly.express as px
from pymongo import MongoClient

# Conex√£o com MongoDB
client = conectar_mongo(nome_banco="saeb")[1]
db = client["pisa"]

st.set_page_config(layout="wide")
st.title("üåç Painel Interativo - Microdados PISA PfD (OCDE)")
st.markdown("**Fonte:** OCDE ¬∑ PISA for Development ¬∑ Alunos ¬∑ Perfil socioecon√¥mico e desempenho educacional")

# Coleta os dados da cole√ß√£o correta
dados = pd.DataFrame(list(db["pisa_pfd_alunos"].find({}, {
    "CNT": 1,
    "CNTSCHID": 1,
    "ST004D01T": 1,
    "ESCS15": 1,
    "PV1MATH": 1,
    "PV1READ": 1,
    "PV1SCIE": 1,
    "_id": 0
})))

# Convers√£o segura para num√©rico
for col in ["ESCS15", "PV1MATH", "PV1READ", "PV1SCIE"]:
    dados[col] = pd.to_numeric(dados[col], errors="coerce")

dados = dados.dropna(subset=["ESCS15", "PV1MATH", "PV1READ", "PV1SCIE"])

# Tradu√ß√£o de nomes
dados = dados.rename(columns={
    "ESCS15": "N√≠vel Socioecon√¥mico",
    "PV1MATH": "Nota em Matem√°tica",
    "PV1READ": "Nota em Leitura",
    "PV1SCIE": "Nota em Ci√™ncias",
    "CNT": "Pa√≠s",
    "ST004D01T": "G√™nero",
    "CNTSCHID": "Escola"
})

# Filtros interativos
st.sidebar.header("Filtros")
paises = sorted(dados["Pa√≠s"].dropna().unique())
generos = sorted(dados["G√™nero"].dropna().unique())

filtro_paises = st.sidebar.multiselect("Pa√≠s(es)", paises, default=paises)
filtro_generos = st.sidebar.multiselect("G√™nero(s)", generos, default=generos)

dados = dados[(dados["Pa√≠s"].isin(filtro_paises)) & (dados["G√™nero"].isin(filtro_generos))]

# Criar faixas do n√≠vel socioecon√¥mico
dados["Faixa Socioecon√¥mica"] = pd.cut(dados["N√≠vel Socioecon√¥mico"], bins=[-999, -2, -1, 0, 1, 999],
                                       labels=["Muito Baixo", "Baixo", "M√©dio", "Alto", "Muito Alto"])

# Gr√°fico de barras: m√©dias por faixa
st.subheader("üìä Desempenho m√©dio por Faixa Socioecon√¥mica")
medias = dados.groupby("Faixa Socioecon√¥mica")[["Nota em Matem√°tica", "Nota em Leitura", "Nota em Ci√™ncias"]].mean().reset_index()

fig_barras = px.bar(medias, x="Faixa Socioecon√¥mica",
                    y=["Nota em Matem√°tica", "Nota em Leitura", "Nota em Ci√™ncias"],
                    barmode="group",
                    labels={"value": "Nota M√©dia", "variable": "Disciplina"},
                    title="M√©dias de Notas por Faixa Socioecon√¥mica")
st.plotly_chart(fig_barras, use_container_width=True)

# Mapa de calor das correla√ß√µes
st.subheader("üî• Correla√ß√£o entre N√≠vel Socioecon√¥mico e Notas")

corr = dados[["N√≠vel Socioecon√¥mico", "Nota em Matem√°tica", "Nota em Leitura", "Nota em Ci√™ncias"]].corr().round(2)

fig_corr = px.imshow(corr.loc[["N√≠vel Socioecon√¥mico"]],
                     text_auto=True,
                     aspect="auto",
                     color_continuous_scale="Blues",
                     title="Correla√ß√£o com N√≠vel Socioecon√¥mico")
st.plotly_chart(fig_corr, use_container_width=True)

# Boxplot por g√™nero
st.subheader("üìà Distribui√ß√£o de Notas por G√™nero")
for materia in ["Nota em Matem√°tica", "Nota em Leitura", "Nota em Ci√™ncias"]:
    st.markdown(f"**{materia}**")
    fig = px.box(dados, x="G√™nero", y=materia, points="all", color="G√™nero")
    st.plotly_chart(fig, use_container_width=True)

# M√©dias por escola (b√¥nus)
st.subheader("üè´ M√©dias por Escola")
agrupado = dados.groupby(["Pa√≠s", "Escola"]).agg({
    "N√≠vel Socioecon√¥mico": "mean",
    "Nota em Matem√°tica": "mean",
    "Nota em Leitura": "mean",
    "Nota em Ci√™ncias": "mean"
}).reset_index()

fig_escolas = px.scatter(agrupado, x="N√≠vel Socioecon√¥mico", y="Nota em Matem√°tica",
                         color="Pa√≠s", hover_data=["Escola"],
                         title="Desempenho m√©dio em Matem√°tica por Escola")
st.plotly_chart(fig_escolas, use_container_width=True)

